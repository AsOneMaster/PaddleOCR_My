# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'OCR.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from functools import partial

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from paddleocr import PaddleOCR, draw_ocr
from PIL import Image
from db.ocrService import OcrService
import OCR_page

import cv2
import numpy as np

# 注册OCR模型
ocr = PaddleOCR(det_model_dir='./inference/db_ABC/', rec_model_dir='./inference/rec_ca/', lang='en')
# 注册数据库服务
ocr_service = OcrService()

class Ui_MainWindow(QMainWindow):

    # --------------------------------------- 加载页面组件 ------------------------------------------#

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 820)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        # 读取图片按钮
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(800, 50, 93, 28))
        self.pushButton.setObjectName("pushButton")
        # 检测与识别图片按钮
        self.pushButton2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton2.setGeometry(QtCore.QRect(800, 100, 93, 28))
        self.pushButton2.setEnabled(False)  # 初始检测按钮不可用
        self.pushButton2.setObjectName("pushButton2")
        # 检测记录按钮
        self.pushButton3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton3.setGeometry(QtCore.QRect(800, 400, 93, 28))
        self.pushButton3.setObjectName("pushButton3")
        # 显示读取图像窗体
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(0, 0, 602, 390))
        self.widget.setObjectName("widget")
        # 显示读取图像Label
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(0, 0, 602, 390))
        self.label.setAlignment(QtCore.Qt.AlignCenter)  # 文字居中
        self.label.setStyleSheet('background-color: rgb(170,170,170)')
        self.label.setObjectName("label")

        self.label_1 = QtWidgets.QLabel(self.widget)
        self.label_1.setGeometry(QtCore.QRect(2, 0, 198, 128))
        self.label_1.setObjectName("label_1")

        self.label_2 = QtWidgets.QLabel(self.widget)
        self.label_2.setGeometry(QtCore.QRect(202, 0, 198, 128))
        self.label_2.setObjectName("label_2")

        self.label_3 = QtWidgets.QLabel(self.widget)
        self.label_3.setGeometry(QtCore.QRect(402, 0, 198, 128))
        self.label_3.setObjectName("label_3")

        self.label_4 = QtWidgets.QLabel(self.widget)
        self.label_4.setGeometry(QtCore.QRect(2, 130, 198, 128))
        self.label_4.setObjectName("label_4")

        self.label_5 = QtWidgets.QLabel(self.widget)
        self.label_5.setGeometry(QtCore.QRect(202, 130, 198, 128))
        self.label_5.setObjectName("label_5")

        self.label_6 = QtWidgets.QLabel(self.widget)
        self.label_6.setGeometry(QtCore.QRect(402, 130, 198, 128))
        self.label_6.setObjectName("label_6")

        self.label_7 = QtWidgets.QLabel(self.widget)
        self.label_7.setGeometry(QtCore.QRect(2, 260, 198, 128))
        self.label_7.setObjectName("label_7")

        self.label_8 = QtWidgets.QLabel(self.widget)
        self.label_8.setGeometry(QtCore.QRect(202, 260, 198, 128))
        self.label_8.setObjectName("label_8")

        self.label_9 = QtWidgets.QLabel(self.widget)
        self.label_9.setGeometry(QtCore.QRect(402, 260, 198, 128))
        self.label_9.setObjectName("label_9")
        # 显示识别结果图像窗体
        self.widget_2 = QtWidgets.QWidget(self.centralwidget)
        self.widget_2.setGeometry(QtCore.QRect(2, 400, 600, 390))
        self.widget_2.setObjectName("widget_2")
        # 显示识别结果图像Labe2
        self.labe2 = QtWidgets.QLabel(self.widget_2)
        self.labe2.setGeometry(QtCore.QRect(0, 0, 600, 390))
        self.labe2.setAlignment(QtCore.Qt.AlignCenter)  # 文字居中
        self.labe2.setStyleSheet('background-color: rgb(170,170,170)')
        self.labe2.setObjectName("labe2")

        self.labe2_1 = QtWidgets.QLabel(self.widget_2)
        self.labe2_1.setGeometry(QtCore.QRect(2, 0, 198, 128))
        self.labe2_1.setObjectName("labe2_1")

        self.labe2_2 = QtWidgets.QLabel(self.widget_2)
        self.labe2_2.setGeometry(QtCore.QRect(202, 0, 198, 128))
        self.labe2_2.setObjectName("labe2_2")

        self.labe2_3 = QtWidgets.QLabel(self.widget_2)
        self.labe2_3.setGeometry(QtCore.QRect(402, 0, 198, 128))
        self.labe2_3.setObjectName("labe2_3")

        self.labe2_4 = QtWidgets.QLabel(self.widget_2)
        self.labe2_4.setGeometry(QtCore.QRect(2, 130, 198, 128))
        self.labe2_4.setObjectName("labe2_4")

        self.labe2_5 = QtWidgets.QLabel(self.widget_2)
        self.labe2_5.setGeometry(QtCore.QRect(202, 130, 198, 128))
        self.labe2_5.setObjectName("labe2_5")

        self.labe2_6 = QtWidgets.QLabel(self.widget_2)
        self.labe2_6.setGeometry(QtCore.QRect(402, 130, 198, 128))
        self.labe2_6.setObjectName("labe2_6")

        self.labe2_7 = QtWidgets.QLabel(self.widget_2)
        self.labe2_7.setGeometry(QtCore.QRect(2, 260, 198, 128))
        self.labe2_7.setObjectName("labe2_7")

        self.labe2_8 = QtWidgets.QLabel(self.widget_2)
        self.labe2_8.setGeometry(QtCore.QRect(202, 260, 198, 128))
        self.labe2_8.setObjectName("labe2_8")

        self.labe2_9 = QtWidgets.QLabel(self.widget_2)
        self.labe2_9.setGeometry(QtCore.QRect(402, 260, 198, 128))
        self.labe2_9.setObjectName("labe2_9")
        #
        # # 显示识别结果图像窗体
        # self.widget_3 = QtWidgets.QWidget(self.centralwidget)
        # self.widget_3.setGeometry(QtCore.QRect(680, 400, 300, 390))
        # self.widget_3.setObjectName("widget_3")
        # # 显示识别结果图像Labe3
        # self.labe3 = QtWidgets.QLabel(self.widget_3)
        # self.labe3.setGeometry(QtCore.QRect(0, 0, 300, 390))
        # self.labe3.setAlignment(QtCore.Qt.AlignCenter)  # 文字居中
        # self.labe3.setStyleSheet('background-color: rgb(170,170,170)')
        # self.labe3.setObjectName("labe3")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menu.menuAction())
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # 读取按钮点击事件绑定
        self.pushButton.clicked.connect(self.showimg)
        # self.signal.connect(self.det_rec)
        # 检测与识别按钮点击事件绑定
        self.pushButton2.clicked.connect(self.det_rec)
        # 检测与识别按钮点击事件绑定
        self.pushButton3.clicked.connect(self.show_table)
        # self.show_record()

    # -------------------------------------- 页面注册，组件名称 -------------------------------------------#
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "工业OCR"))
        self.pushButton.setText(_translate("MainWindow", "读取图片"))
        self.pushButton2.setText(_translate("MainWindow", "检测与识别"))
        self.pushButton3.setText(_translate("MainWindow", "检测记录"))
        self.label.setText(_translate("MainWindow", "图片显示"))
        self.labe2.setText(_translate("MainWindow", "结果显示"))
        # self.labe3.setText(_translate("MainWindow", "检测记录"))
        self.menu.setTitle(_translate("MainWindow", "角钢字符检测与识别"))

    # -------------------------------------- 提示框 -------------------------------------------#
    def show_message(self, msg):
        QMessageBox.information(self, "提示", "检测结果保存" + msg, QMessageBox.Yes)

    # ----------------------------- 读取图片并获取图片路径，并显示图片 -----------------------------#
    def showimg(self):
        global img_path
        self.labels = [self.label_1, self.label_2, self.label_3, self.label_4, self.label_5, self.label_6, self.label_7, self.label_8, self.label_9]
        files, _ = QFileDialog.getOpenFileNames(self, "打开图片", "", "*.jpg;;*.png;;All Files(*)")
        # 清除图片
        if files:
            self.pushButton2.setEnabled(True)
            for i in range(9):
                self.labels[i].setPixmap(QPixmap(""))
            self.label.setPixmap(QPixmap(""))
        if len(files) == 1:
            img = QtGui.QPixmap(files[0]).scaled(self.label.width(), self.label.height())
            self.label.setPixmap(img)
            self.label.setScaledContents(True)
            img_path = files[0]
        else:
            img_list = []
            for i in range(len(files)):
                jpg = QtGui.QPixmap(files[i]).scaled(self.labels[i].width(), self.labels[i].height())
                self.labels[i].setPixmap(jpg)
                self.labels[i].setScaledContents(True)
                img_list.append(files[i])
            img_path = img_list

        # img_path = files.
        # 检测按钮可用


    # ----------------------------- 显示检测记录窗口 -----------------------------#
    def show_table(self):
        self.chile_Win = OCR_page.ChildWindow()
        self.chile_Win.show()

    # ----------------------------- 画出检测结果，并显示 -----------------------------#
    def draw_img(self, img_path, boxes, txts):
        img1 = cv2.imread(img_path, 1)
        m, n = 8.0 // (3000 // img1.shape[0]), 5 // (3000 // img1.shape[0])  # m字体倍数，n字体粗细
        # img1 = img_resize(img)
        for i in range(len(boxes)):
            pts = np.array(boxes[i], np.int32)  # 数据类型必须为 int32
            pts = pts.reshape((-1, 1, 2))
            # 绘制未填充的多边形
            cv2.polylines(img1, [pts], isClosed=True, color=(0, 255, 0), thickness=n)
            x, y = boxes[i][0][0], boxes[i][0][1] - 50

            if (y - 100) < 0:
                x, y = boxes[i][3][0], boxes[i][3][1] + 100

                print('3----------------x:', x, 'y:', y)

            print("4---------------------m:", m, "n:", n)

            cv2.putText(img1, str(txts[i]), (int(x), int(y)), cv2.FONT_HERSHEY_COMPLEX, m + 1, (51, 51, 255), n + 1)
        # 绘制填充的多边形
        # cv2.fillPoly(img, [pts], color=(255, 255, 0))
        # cv2.imshow('img', img1)
        cv2.imwrite("result1-1.jpg", img1)
        cv2.waitKey(0)

    # ----------------------------- 对图片进行检测与识别，并将结果显示 -----------------------------#
    def det_rec(self):
        # global img_path
        print(img_path, "--------")
        msg = ''
        self.labe2s = [self.labe2_1, self.labe2_2, self.labe2_3, self.labe2_4, self.labe2_5, self.labe2_6,
                       self.labe2_7, self.labe2_8, self.labe2_9]
        for i in range(9):
            self.labe2s[i].setPixmap(QPixmap(""))
        self.labe2.setPixmap(QPixmap(""))
        if type(img_path) == list:

            for i in range(len(img_path)):
                result = ocr.ocr(img_path[i], cls=False)
                boxes = [line[0] for line in result]
                print("1----------------", boxes)
                txts = [line[1][0] for line in result]
                print("2----------------", txts)
                scores = [line[1][1] for line in result]
                res_txt = ' '.join(txts)
                # 判断有无检测过
                msg = ocr_service.select_ocr(img_path[i])
                if msg:
                    msg = img_path[i] + '已检测，请重新选择图片'
                    # 显示提示信息
                    self.show_message(msg=msg)
                    _translate = QtCore.QCoreApplication.translate
                    self.labe2s[i].setText(_translate("MainWindow", img_path[i]+"\n\n——已检测"))
                else:
                    # 插入数据库
                    msg = ocr_service.insert_ocr(res_txt, img_path[i])
                    print('==========插入', msg, '==========')
                    self.draw_img(img_path=img_path[i], boxes=boxes, txts=txts)
                    # im_show.save('result1.jpg')
                    img = QtGui.QPixmap('result1-1.jpg').scaled(self.labe2s[i].width(), self.labe2s[i].height())
                    # QLabel加载图像
                    self.labe2s[i].setPixmap(img)
                    # 图像自适应窗口大小
                    self.labe2s[i].setScaledContents(True)
                    # 显示提示信息
            self.show_message(msg=msg)
        else:
            result = ocr.ocr(img_path, cls=False)
            boxes = [line[0] for line in result]
            print("1----------------", boxes)
            txts = [line[1][0] for line in result]
            print("2----------------", txts)
            scores = [line[1][1] for line in result]
            res_txt = ' '.join(txts)
            # 判断有无检测过
            msg = ocr_service.select_ocr(img_path)
            if msg:
                msg = img_path+'已检测，请重新选择图片'
                # 显示提示信息
                self.show_message(msg=msg)
            else:
                # 插入数据库
                msg = ocr_service.insert_ocr(res_txt, img_path)
                print('==========插入', msg, '==========')
                self.draw_img(img_path=img_path, boxes=boxes, txts=txts)
                # im_show.save('result1.jpg')
                img = QtGui.QPixmap('result1-1.jpg').scaled(self.labe2.width(), self.labe2.height())
                # QLabel加载图像
                self.labe2.setPixmap(img)
                # 图像自适应窗口大小
                self.labe2.setScaledContents(True)
                # 显示提示信息
                self.show_message(msg=msg)